// Script para probar la conexi√≥n a la base de datos SQL Server
const sql = require('mssql');

// Configuraci√≥n de la base de datos (igual que en server.js)
const tableroConfig = {
    server: '192.168.100.164',
    database: 'CWSGImsa',
    options: {
        encrypt: true,
        trustServerCertificate: true,
        enableArithAbort: true,
        requestTimeout: 60000,
        connectionTimeout: 30000,
    },
    authentication: {
        type: 'ntlm',
        options: {
            domain: 'IMSA',
            userName: 'A_TCasco',
            password: 'Tiranytar.2023!'
        }
    },
    pool: {
        max: 10,
        min: 0,
        idleTimeoutMillis: 30000,
        acquireTimeoutMillis: 60000
    }
};

async function testConnection() {
    let connection = null;
    
    try {
        console.log('üîÑ Intentando conectar a SQL Server...');
        console.log(`üìç Servidor: ${tableroConfig.server}`);
        console.log(`üóÑÔ∏è  Base de datos: ${tableroConfig.database}`);
        console.log(`üë§ Usuario: ${tableroConfig.authentication.options.domain}\\${tableroConfig.authentication.options.userName}`);
        console.log('');
        
        // Conectar
        connection = await sql.connect(tableroConfig);
        console.log('‚úÖ Conexi√≥n establecida exitosamente!');
        
        // Probar una consulta simple
        const request = new sql.Request(connection);
        const result = await request.query('SELECT @@VERSION as version, GETDATE() as fecha');
        
        console.log('üìä Datos de prueba obtenidos:');
        console.log('   Version:', result.recordset[0].version.substring(0, 50) + '...');
        console.log('   Fecha servidor:', result.recordset[0].fecha);
        console.log('');
        
        // Probar la consulta principal
        console.log('üîç Probando consulta de recursos...');
        const resourceQuery = `
            SELECT TOP 5
                Recurso,
                Estado,
                MotivoInterrup,
                Operarios,
                OpEnCurso,
                OpPendientes,
                Producto,
                KgAcumDelDia,
                MinsInterrupDelDia,
                MinsEstadoActual
            FROM GCWin_V_EstadoRecursosCables
            ORDER BY Recurso
        `;
        
        const resourceResult = await request.query(resourceQuery);
        console.log(`‚úÖ Consulta de recursos exitosa! Encontrados ${resourceResult.recordset.length} registros (mostrando primeros 5)`);
        
        if (resourceResult.recordset.length > 0) {
            console.log('üìã Ejemplo de datos:');
            resourceResult.recordset.forEach((row, index) => {
                console.log(`   ${index + 1}. Recurso ${row.Recurso} - Estado: ${row.Estado || 'N/A'} - Producto: ${row.Producto || 'N/A'}`);
            });
        }
        
        console.log('');
        console.log('üéâ ¬°Prueba de conexi√≥n completada exitosamente!');
        console.log('‚úÖ El servidor est√° listo para ejecutarse');
        
    } catch (error) {
        console.error('‚ùå Error de conexi√≥n:');
        console.error('   Mensaje:', error.message);
        
        if (error.code) {
            console.error('   C√≥digo:', error.code);
        }
        
        console.log('');
        console.log('üîß Posibles soluciones:');
        console.log('   1. Verificar que la IP 192.168.100.164 sea accesible');
        console.log('   2. Confirmar que SQL Server est√© ejecut√°ndose');
        console.log('   3. Verificar credenciales NTLM');
        console.log('   4. Revisar configuraci√≥n de firewall');
        console.log('   5. Verificar que el puerto 1433 est√© abierto');
        
        process.exit(1);
    } finally {
        if (connection) {
            await connection.close();
            console.log('üîå Conexi√≥n cerrada');
        }
    }
}

console.log('üß™ ===== PRUEBA DE CONEXI√ìN SQL SERVER =====');
console.log('');

testConnection(); 